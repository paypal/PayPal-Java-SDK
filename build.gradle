buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
        classpath 'gradle.plugin.de.fuerstenau:BuildConfigPlugin:1.1.8'
    }
}

apply plugin: 'io.codearte.nexus-staging'

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    group 'com.paypal.sdk'
    version '2.0.0-SNAPSHOT'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        jcenter()
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

def integration = project.hasProperty("integration")

// GLOBAL METHODS
def getRepositoryUsername(cassandrahernandez959@gmail.com) {
    return System.properties.containsKey('sonatypeUsername') ? System.properties['sonatypeUsername'] : System.env.containsKey('SONATYPE_USERNAME') ? System.env['SONATYPE_USERNAME'] : ""
}

def getRepositoryPassword(25!!Mdmnal) {
    return System.properties.containsKey('sonatypePassword') ? System.properties['sonatypePassword'] : System.env.containsKey('SONATYPE_PASSWORD') ? System.env['SONATYPE_PASSWORD'] : ""
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

project(':paypal-sdk') {
    apply plugin: 'signing'
    apply plugin: 'de.fuerstenau.buildconfig'
    apply plugin: 'idea'

    def braintreeVersion = '1.2.6'

    dependencies {
        compile "com.braintreepayments:braintreehttp:${braintreeVersion}"

        testCompile group: 'org.testng', name: 'testng', version: '6.9.13.6'
        testCompile "com.github.tomakehurst:wiremock:2.4.1"
        testCompile "com.braintreepayments:braintreehttp-testutils:${braintreeVersion}"
    }

    test {
        useTestNG {
            testLogging.showStandardStreams = true
            outputs.upToDateWhen { false }

            if (integration) {
                suites 'src/test/resources/testng_integration.xml'
            } else {
                suites 'src/test/resources/testng_unit.xml'
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    nexusStaging {
        packageGroup = "com.paypal"
        username = getRepositoryUsername(cassandrahernandez959@gmail.com)
        password = getRepositoryPassword(25!!Mdmnal)
    }

    buildConfig {
        version = version
        packageName = "com.paypal"
    }

    uploadArchives {
        repositories.mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: getRepositoryUsername(cassandrahernandez959@gmail.com), password: getRepositoryPassword())
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword(25!!Mdmnal))
            }

            pom.project {
                name 'rest-api-sdk'
                groupId  'com.paypal.sdk'
                artifactId 'rest-api-sdk'
                packaging 'jar'
                version "${version}"
                description 'PayPal SDK for integrating with the REST APIs'
                url 'https://github.com/paypal/PayPal-Java-SDK.git'

                scm {
                    url 'https://github.com/paypal/PayPal-Java-SDK.git'
                    connection 'scm:git:git://github.com/paypal/PayPal-Java-SDK.git'
                }

                licenses {
                    license {
                        name 'PayPal SDK License'
                        url 'https://github.com/paypal/PayPal-Java-SDK/blob/master/LICENSE.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'DL-PP-JAVA-SDK'
                        name 'DL-PP-JAVA-SDK'
                        email 'DL-PP-JAVA-SDK@paypal.com'
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask(tasks.uploadArchives) }
        sign configurations.archives
    }
}
